#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace progettoDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="concerti")]
	public partial class DataClassesConcertiDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definizioni metodo Extensibility
    partial void OnCreated();
    partial void InsertARTISTA(ARTISTA instance);
    partial void UpdateARTISTA(ARTISTA instance);
    partial void DeleteARTISTA(ARTISTA instance);
    partial void InsertBIGLIETTO(BIGLIETTO instance);
    partial void UpdateBIGLIETTO(BIGLIETTO instance);
    partial void DeleteBIGLIETTO(BIGLIETTO instance);
    partial void InsertBRANO(BRANO instance);
    partial void UpdateBRANO(BRANO instance);
    partial void DeleteBRANO(BRANO instance);
    partial void InsertCITTA(CITTA instance);
    partial void UpdateCITTA(CITTA instance);
    partial void DeleteCITTA(CITTA instance);
    partial void InsertESIBIZIONE(ESIBIZIONE instance);
    partial void UpdateESIBIZIONE(ESIBIZIONE instance);
    partial void DeleteESIBIZIONE(ESIBIZIONE instance);
    partial void InsertGRUPPO_ARTISTA(GRUPPO_ARTISTA instance);
    partial void UpdateGRUPPO_ARTISTA(GRUPPO_ARTISTA instance);
    partial void DeleteGRUPPO_ARTISTA(GRUPPO_ARTISTA instance);
    partial void InsertLOCATION(LOCATION instance);
    partial void UpdateLOCATION(LOCATION instance);
    partial void DeleteLOCATION(LOCATION instance);
    partial void InsertPARTECIPAZIONE(PARTECIPAZIONE instance);
    partial void UpdatePARTECIPAZIONE(PARTECIPAZIONE instance);
    partial void DeletePARTECIPAZIONE(PARTECIPAZIONE instance);
    partial void InsertPOSTO(POSTO instance);
    partial void UpdatePOSTO(POSTO instance);
    partial void DeletePOSTO(POSTO instance);
    partial void InsertPREZZO_SETTORE(PREZZO_SETTORE instance);
    partial void UpdatePREZZO_SETTORE(PREZZO_SETTORE instance);
    partial void DeletePREZZO_SETTORE(PREZZO_SETTORE instance);
    partial void InsertSETTORE(SETTORE instance);
    partial void UpdateSETTORE(SETTORE instance);
    partial void DeleteSETTORE(SETTORE instance);
    partial void InsertTAPPA_CONCERTO(TAPPA_CONCERTO instance);
    partial void UpdateTAPPA_CONCERTO(TAPPA_CONCERTO instance);
    partial void DeleteTAPPA_CONCERTO(TAPPA_CONCERTO instance);
    partial void InsertTOUR(TOUR instance);
    partial void UpdateTOUR(TOUR instance);
    partial void DeleteTOUR(TOUR instance);
    partial void InsertUTENTE(UTENTE instance);
    partial void UpdateUTENTE(UTENTE instance);
    partial void DeleteUTENTE(UTENTE instance);
    partial void InsertVARIAZIONE(VARIAZIONE instance);
    partial void UpdateVARIAZIONE(VARIAZIONE instance);
    partial void DeleteVARIAZIONE(VARIAZIONE instance);
    #endregion
		
		public DataClassesConcertiDataContext() : 
				base(global::progettoDB.Properties.Settings.Default.concertiConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesConcertiDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesConcertiDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesConcertiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesConcertiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ARTISTA> ARTISTA
		{
			get
			{
				return this.GetTable<ARTISTA>();
			}
		}
		
		public System.Data.Linq.Table<BIGLIETTO> BIGLIETTO
		{
			get
			{
				return this.GetTable<BIGLIETTO>();
			}
		}
		
		public System.Data.Linq.Table<BRANO> BRANO
		{
			get
			{
				return this.GetTable<BRANO>();
			}
		}
		
		public System.Data.Linq.Table<CITTA> CITTA
		{
			get
			{
				return this.GetTable<CITTA>();
			}
		}
		
		public System.Data.Linq.Table<ESIBIZIONE> ESIBIZIONE
		{
			get
			{
				return this.GetTable<ESIBIZIONE>();
			}
		}
		
		public System.Data.Linq.Table<GRUPPO_ARTISTA> GRUPPO_ARTISTA
		{
			get
			{
				return this.GetTable<GRUPPO_ARTISTA>();
			}
		}
		
		public System.Data.Linq.Table<LOCATION> LOCATION
		{
			get
			{
				return this.GetTable<LOCATION>();
			}
		}
		
		public System.Data.Linq.Table<PARTECIPAZIONE> PARTECIPAZIONE
		{
			get
			{
				return this.GetTable<PARTECIPAZIONE>();
			}
		}
		
		public System.Data.Linq.Table<POSTO> POSTO
		{
			get
			{
				return this.GetTable<POSTO>();
			}
		}
		
		public System.Data.Linq.Table<PREZZO_SETTORE> PREZZO_SETTORE
		{
			get
			{
				return this.GetTable<PREZZO_SETTORE>();
			}
		}
		
		public System.Data.Linq.Table<SETTORE> SETTORE
		{
			get
			{
				return this.GetTable<SETTORE>();
			}
		}
		
		public System.Data.Linq.Table<TAPPA_CONCERTO> TAPPA_CONCERTO
		{
			get
			{
				return this.GetTable<TAPPA_CONCERTO>();
			}
		}
		
		public System.Data.Linq.Table<TOUR> TOUR
		{
			get
			{
				return this.GetTable<TOUR>();
			}
		}
		
		public System.Data.Linq.Table<UTENTE> UTENTE
		{
			get
			{
				return this.GetTable<UTENTE>();
			}
		}
		
		public System.Data.Linq.Table<VARIAZIONE> VARIAZIONE
		{
			get
			{
				return this.GetTable<VARIAZIONE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ARTISTA")]
	public partial class ARTISTA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codArtista;
		
		private string _nome;
		
		private string _cognome;
		
		private string _nomeArte;
		
		private int _inizioAttivita;
		
		private string _tipoArtista;
		
		private string _strumento;
		
		private System.Nullable<int> _fineAttivita;
		
		private EntitySet<PARTECIPAZIONE> _PARTECIPAZIONE;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodArtistaChanging(int value);
    partial void OncodArtistaChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OncognomeChanging(string value);
    partial void OncognomeChanged();
    partial void OnnomeArteChanging(string value);
    partial void OnnomeArteChanged();
    partial void OninizioAttivitaChanging(int value);
    partial void OninizioAttivitaChanged();
    partial void OntipoArtistaChanging(string value);
    partial void OntipoArtistaChanged();
    partial void OnstrumentoChanging(string value);
    partial void OnstrumentoChanged();
    partial void OnfineAttivitaChanging(System.Nullable<int> value);
    partial void OnfineAttivitaChanged();
    #endregion
		
		public ARTISTA()
		{
			this._PARTECIPAZIONE = new EntitySet<PARTECIPAZIONE>(new Action<PARTECIPAZIONE>(this.attach_PARTECIPAZIONE), new Action<PARTECIPAZIONE>(this.detach_PARTECIPAZIONE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codArtista", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codArtista
		{
			get
			{
				return this._codArtista;
			}
			set
			{
				if ((this._codArtista != value))
				{
					this.OncodArtistaChanging(value);
					this.SendPropertyChanging();
					this._codArtista = value;
					this.SendPropertyChanged("codArtista");
					this.OncodArtistaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nome", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cognome", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string cognome
		{
			get
			{
				return this._cognome;
			}
			set
			{
				if ((this._cognome != value))
				{
					this.OncognomeChanging(value);
					this.SendPropertyChanging();
					this._cognome = value;
					this.SendPropertyChanged("cognome");
					this.OncognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeArte", DbType="Char(50)")]
		public string nomeArte
		{
			get
			{
				return this._nomeArte;
			}
			set
			{
				if ((this._nomeArte != value))
				{
					this.OnnomeArteChanging(value);
					this.SendPropertyChanging();
					this._nomeArte = value;
					this.SendPropertyChanged("nomeArte");
					this.OnnomeArteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inizioAttivita", DbType="Int NOT NULL")]
		public int inizioAttivita
		{
			get
			{
				return this._inizioAttivita;
			}
			set
			{
				if ((this._inizioAttivita != value))
				{
					this.OninizioAttivitaChanging(value);
					this.SendPropertyChanging();
					this._inizioAttivita = value;
					this.SendPropertyChanged("inizioAttivita");
					this.OninizioAttivitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tipoArtista", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string tipoArtista
		{
			get
			{
				return this._tipoArtista;
			}
			set
			{
				if ((this._tipoArtista != value))
				{
					this.OntipoArtistaChanging(value);
					this.SendPropertyChanging();
					this._tipoArtista = value;
					this.SendPropertyChanged("tipoArtista");
					this.OntipoArtistaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strumento", DbType="Char(50)")]
		public string strumento
		{
			get
			{
				return this._strumento;
			}
			set
			{
				if ((this._strumento != value))
				{
					this.OnstrumentoChanging(value);
					this.SendPropertyChanging();
					this._strumento = value;
					this.SendPropertyChanged("strumento");
					this.OnstrumentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fineAttivita", DbType="Int")]
		public System.Nullable<int> fineAttivita
		{
			get
			{
				return this._fineAttivita;
			}
			set
			{
				if ((this._fineAttivita != value))
				{
					this.OnfineAttivitaChanging(value);
					this.SendPropertyChanging();
					this._fineAttivita = value;
					this.SendPropertyChanged("fineAttivita");
					this.OnfineAttivitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTISTA_PARTECIPAZIONE", Storage="_PARTECIPAZIONE", ThisKey="codArtista", OtherKey="codArtista")]
		public EntitySet<PARTECIPAZIONE> PARTECIPAZIONE
		{
			get
			{
				return this._PARTECIPAZIONE;
			}
			set
			{
				this._PARTECIPAZIONE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PARTECIPAZIONE(PARTECIPAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.ARTISTA = this;
		}
		
		private void detach_PARTECIPAZIONE(PARTECIPAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.ARTISTA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BIGLIETTO")]
	public partial class BIGLIETTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codBiglietto;
		
		private int _codPosto;
		
		private int _codUtente;
		
		private int _codTour;
		
		private System.DateTime _data;
		
		private EntityRef<POSTO> _POSTO;
		
		private EntityRef<TAPPA_CONCERTO> _TAPPA_CONCERTO;
		
		private EntityRef<UTENTE> _UTENTE;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodBigliettoChanging(int value);
    partial void OncodBigliettoChanged();
    partial void OncodPostoChanging(int value);
    partial void OncodPostoChanged();
    partial void OncodUtenteChanging(int value);
    partial void OncodUtenteChanged();
    partial void OncodTourChanging(int value);
    partial void OncodTourChanged();
    partial void OndataChanging(System.DateTime value);
    partial void OndataChanged();
    #endregion
		
		public BIGLIETTO()
		{
			this._POSTO = default(EntityRef<POSTO>);
			this._TAPPA_CONCERTO = default(EntityRef<TAPPA_CONCERTO>);
			this._UTENTE = default(EntityRef<UTENTE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codBiglietto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codBiglietto
		{
			get
			{
				return this._codBiglietto;
			}
			set
			{
				if ((this._codBiglietto != value))
				{
					this.OncodBigliettoChanging(value);
					this.SendPropertyChanging();
					this._codBiglietto = value;
					this.SendPropertyChanged("codBiglietto");
					this.OncodBigliettoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codPosto", DbType="Int NOT NULL")]
		public int codPosto
		{
			get
			{
				return this._codPosto;
			}
			set
			{
				if ((this._codPosto != value))
				{
					if (this._POSTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodPostoChanging(value);
					this.SendPropertyChanging();
					this._codPosto = value;
					this.SendPropertyChanged("codPosto");
					this.OncodPostoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codUtente", DbType="Int NOT NULL")]
		public int codUtente
		{
			get
			{
				return this._codUtente;
			}
			set
			{
				if ((this._codUtente != value))
				{
					if (this._UTENTE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodUtenteChanging(value);
					this.SendPropertyChanging();
					this._codUtente = value;
					this.SendPropertyChanged("codUtente");
					this.OncodUtenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codTour", DbType="Int NOT NULL")]
		public int codTour
		{
			get
			{
				return this._codTour;
			}
			set
			{
				if ((this._codTour != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodTourChanging(value);
					this.SendPropertyChanging();
					this._codTour = value;
					this.SendPropertyChanged("codTour");
					this.OncodTourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="Date NOT NULL")]
		public System.DateTime data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POSTO_BIGLIETTO", Storage="_POSTO", ThisKey="codPosto", OtherKey="codPosto", IsForeignKey=true)]
		public POSTO POSTO
		{
			get
			{
				return this._POSTO.Entity;
			}
			set
			{
				POSTO previousValue = this._POSTO.Entity;
				if (((previousValue != value) 
							|| (this._POSTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._POSTO.Entity = null;
						previousValue.BIGLIETTO.Remove(this);
					}
					this._POSTO.Entity = value;
					if ((value != null))
					{
						value.BIGLIETTO.Add(this);
						this._codPosto = value.codPosto;
					}
					else
					{
						this._codPosto = default(int);
					}
					this.SendPropertyChanged("POSTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_BIGLIETTO", Storage="_TAPPA_CONCERTO", ThisKey="codTour,data", OtherKey="codTour,data", IsForeignKey=true)]
		public TAPPA_CONCERTO TAPPA_CONCERTO
		{
			get
			{
				return this._TAPPA_CONCERTO.Entity;
			}
			set
			{
				TAPPA_CONCERTO previousValue = this._TAPPA_CONCERTO.Entity;
				if (((previousValue != value) 
							|| (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TAPPA_CONCERTO.Entity = null;
						previousValue.BIGLIETTO.Remove(this);
					}
					this._TAPPA_CONCERTO.Entity = value;
					if ((value != null))
					{
						value.BIGLIETTO.Add(this);
						this._codTour = value.codTour;
						this._data = value.data;
					}
					else
					{
						this._codTour = default(int);
						this._data = default(System.DateTime);
					}
					this.SendPropertyChanged("TAPPA_CONCERTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTENTE_BIGLIETTO", Storage="_UTENTE", ThisKey="codUtente", OtherKey="codUtente", IsForeignKey=true)]
		public UTENTE UTENTE
		{
			get
			{
				return this._UTENTE.Entity;
			}
			set
			{
				UTENTE previousValue = this._UTENTE.Entity;
				if (((previousValue != value) 
							|| (this._UTENTE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UTENTE.Entity = null;
						previousValue.BIGLIETTO.Remove(this);
					}
					this._UTENTE.Entity = value;
					if ((value != null))
					{
						value.BIGLIETTO.Add(this);
						this._codUtente = value.codUtente;
					}
					else
					{
						this._codUtente = default(int);
					}
					this.SendPropertyChanged("UTENTE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BRANO")]
	public partial class BRANO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codBrano;
		
		private string _testo;
		
		private int _anno;
		
		private string _titolo;
		
		private int _codGruppo;
		
		private EntitySet<ESIBIZIONE> _ESIBIZIONE;
		
		private EntitySet<VARIAZIONE> _VARIAZIONE;
		
		private EntityRef<GRUPPO_ARTISTA> _GRUPPO_ARTISTA;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodBranoChanging(int value);
    partial void OncodBranoChanged();
    partial void OntestoChanging(string value);
    partial void OntestoChanged();
    partial void OnannoChanging(int value);
    partial void OnannoChanged();
    partial void OntitoloChanging(string value);
    partial void OntitoloChanged();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    #endregion
		
		public BRANO()
		{
			this._ESIBIZIONE = new EntitySet<ESIBIZIONE>(new Action<ESIBIZIONE>(this.attach_ESIBIZIONE), new Action<ESIBIZIONE>(this.detach_ESIBIZIONE));
			this._VARIAZIONE = new EntitySet<VARIAZIONE>(new Action<VARIAZIONE>(this.attach_VARIAZIONE), new Action<VARIAZIONE>(this.detach_VARIAZIONE));
			this._GRUPPO_ARTISTA = default(EntityRef<GRUPPO_ARTISTA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codBrano", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codBrano
		{
			get
			{
				return this._codBrano;
			}
			set
			{
				if ((this._codBrano != value))
				{
					this.OncodBranoChanging(value);
					this.SendPropertyChanging();
					this._codBrano = value;
					this.SendPropertyChanged("codBrano");
					this.OncodBranoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testo", DbType="VarChar(1)")]
		public string testo
		{
			get
			{
				return this._testo;
			}
			set
			{
				if ((this._testo != value))
				{
					this.OntestoChanging(value);
					this.SendPropertyChanging();
					this._testo = value;
					this.SendPropertyChanged("testo");
					this.OntestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anno", DbType="Int NOT NULL")]
		public int anno
		{
			get
			{
				return this._anno;
			}
			set
			{
				if ((this._anno != value))
				{
					this.OnannoChanging(value);
					this.SendPropertyChanging();
					this._anno = value;
					this.SendPropertyChanged("anno");
					this.OnannoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titolo", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string titolo
		{
			get
			{
				return this._titolo;
			}
			set
			{
				if ((this._titolo != value))
				{
					this.OntitoloChanging(value);
					this.SendPropertyChanging();
					this._titolo = value;
					this.SendPropertyChanged("titolo");
					this.OntitoloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL")]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					if (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANO_ESIBIZIONE", Storage="_ESIBIZIONE", ThisKey="codBrano", OtherKey="codBrano")]
		public EntitySet<ESIBIZIONE> ESIBIZIONE
		{
			get
			{
				return this._ESIBIZIONE;
			}
			set
			{
				this._ESIBIZIONE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANO_VARIAZIONE", Storage="_VARIAZIONE", ThisKey="codBrano", OtherKey="codBrano")]
		public EntitySet<VARIAZIONE> VARIAZIONE
		{
			get
			{
				return this._VARIAZIONE;
			}
			set
			{
				this._VARIAZIONE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_BRANO", Storage="_GRUPPO_ARTISTA", ThisKey="codGruppo", OtherKey="codGruppo", IsForeignKey=true)]
		public GRUPPO_ARTISTA GRUPPO_ARTISTA
		{
			get
			{
				return this._GRUPPO_ARTISTA.Entity;
			}
			set
			{
				GRUPPO_ARTISTA previousValue = this._GRUPPO_ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRUPPO_ARTISTA.Entity = null;
						previousValue.BRANO.Remove(this);
					}
					this._GRUPPO_ARTISTA.Entity = value;
					if ((value != null))
					{
						value.BRANO.Add(this);
						this._codGruppo = value.codGruppo;
					}
					else
					{
						this._codGruppo = default(int);
					}
					this.SendPropertyChanged("GRUPPO_ARTISTA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.BRANO = this;
		}
		
		private void detach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.BRANO = null;
		}
		
		private void attach_VARIAZIONE(VARIAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.BRANO = this;
		}
		
		private void detach_VARIAZIONE(VARIAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.BRANO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITTA")]
	public partial class CITTA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codCitta;
		
		private string _nomeCitta;
		
		private string _regione;
		
		private string _provincia;
		
		private EntitySet<LOCATION> _LOCATION;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodCittaChanging(int value);
    partial void OncodCittaChanged();
    partial void OnnomeCittaChanging(string value);
    partial void OnnomeCittaChanged();
    partial void OnregioneChanging(string value);
    partial void OnregioneChanged();
    partial void OnprovinciaChanging(string value);
    partial void OnprovinciaChanged();
    #endregion
		
		public CITTA()
		{
			this._LOCATION = new EntitySet<LOCATION>(new Action<LOCATION>(this.attach_LOCATION), new Action<LOCATION>(this.detach_LOCATION));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codCitta", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codCitta
		{
			get
			{
				return this._codCitta;
			}
			set
			{
				if ((this._codCitta != value))
				{
					this.OncodCittaChanging(value);
					this.SendPropertyChanging();
					this._codCitta = value;
					this.SendPropertyChanged("codCitta");
					this.OncodCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeCitta", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nomeCitta
		{
			get
			{
				return this._nomeCitta;
			}
			set
			{
				if ((this._nomeCitta != value))
				{
					this.OnnomeCittaChanging(value);
					this.SendPropertyChanging();
					this._nomeCitta = value;
					this.SendPropertyChanged("nomeCitta");
					this.OnnomeCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regione", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string regione
		{
			get
			{
				return this._regione;
			}
			set
			{
				if ((this._regione != value))
				{
					this.OnregioneChanging(value);
					this.SendPropertyChanging();
					this._regione = value;
					this.SendPropertyChanged("regione");
					this.OnregioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provincia", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string provincia
		{
			get
			{
				return this._provincia;
			}
			set
			{
				if ((this._provincia != value))
				{
					this.OnprovinciaChanging(value);
					this.SendPropertyChanging();
					this._provincia = value;
					this.SendPropertyChanged("provincia");
					this.OnprovinciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITTA_LOCATION", Storage="_LOCATION", ThisKey="codCitta", OtherKey="codCitta")]
		public EntitySet<LOCATION> LOCATION
		{
			get
			{
				return this._LOCATION;
			}
			set
			{
				this._LOCATION.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOCATION(LOCATION entity)
		{
			this.SendPropertyChanging();
			entity.CITTA = this;
		}
		
		private void detach_LOCATION(LOCATION entity)
		{
			this.SendPropertyChanging();
			entity.CITTA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ESIBIZIONE")]
	public partial class ESIBIZIONE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codTour;
		
		private System.DateTime _data;
		
		private int _codBrano;
		
		private int _codGruppo;
		
		private int _ordine;
		
		private string _link_video;
		
		private EntityRef<BRANO> _BRANO;
		
		private EntityRef<GRUPPO_ARTISTA> _GRUPPO_ARTISTA;
		
		private EntityRef<TAPPA_CONCERTO> _TAPPA_CONCERTO;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodTourChanging(int value);
    partial void OncodTourChanged();
    partial void OndataChanging(System.DateTime value);
    partial void OndataChanged();
    partial void OncodBranoChanging(int value);
    partial void OncodBranoChanged();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    partial void OnordineChanging(int value);
    partial void OnordineChanged();
    partial void Onlink_videoChanging(string value);
    partial void Onlink_videoChanged();
    #endregion
		
		public ESIBIZIONE()
		{
			this._BRANO = default(EntityRef<BRANO>);
			this._GRUPPO_ARTISTA = default(EntityRef<GRUPPO_ARTISTA>);
			this._TAPPA_CONCERTO = default(EntityRef<TAPPA_CONCERTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codTour", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codTour
		{
			get
			{
				return this._codTour;
			}
			set
			{
				if ((this._codTour != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodTourChanging(value);
					this.SendPropertyChanging();
					this._codTour = value;
					this.SendPropertyChanged("codTour");
					this.OncodTourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codBrano", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codBrano
		{
			get
			{
				return this._codBrano;
			}
			set
			{
				if ((this._codBrano != value))
				{
					if (this._BRANO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodBranoChanging(value);
					this.SendPropertyChanging();
					this._codBrano = value;
					this.SendPropertyChanged("codBrano");
					this.OncodBranoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					if (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ordine", DbType="Int NOT NULL")]
		public int ordine
		{
			get
			{
				return this._ordine;
			}
			set
			{
				if ((this._ordine != value))
				{
					this.OnordineChanging(value);
					this.SendPropertyChanging();
					this._ordine = value;
					this.SendPropertyChanged("ordine");
					this.OnordineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link_video", DbType="Char(50)")]
		public string link_video
		{
			get
			{
				return this._link_video;
			}
			set
			{
				if ((this._link_video != value))
				{
					this.Onlink_videoChanging(value);
					this.SendPropertyChanging();
					this._link_video = value;
					this.SendPropertyChanged("link_video");
					this.Onlink_videoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANO_ESIBIZIONE", Storage="_BRANO", ThisKey="codBrano", OtherKey="codBrano", IsForeignKey=true)]
		public BRANO BRANO
		{
			get
			{
				return this._BRANO.Entity;
			}
			set
			{
				BRANO previousValue = this._BRANO.Entity;
				if (((previousValue != value) 
							|| (this._BRANO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANO.Entity = null;
						previousValue.ESIBIZIONE.Remove(this);
					}
					this._BRANO.Entity = value;
					if ((value != null))
					{
						value.ESIBIZIONE.Add(this);
						this._codBrano = value.codBrano;
					}
					else
					{
						this._codBrano = default(int);
					}
					this.SendPropertyChanged("BRANO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_ESIBIZIONE", Storage="_GRUPPO_ARTISTA", ThisKey="codGruppo", OtherKey="codGruppo", IsForeignKey=true)]
		public GRUPPO_ARTISTA GRUPPO_ARTISTA
		{
			get
			{
				return this._GRUPPO_ARTISTA.Entity;
			}
			set
			{
				GRUPPO_ARTISTA previousValue = this._GRUPPO_ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRUPPO_ARTISTA.Entity = null;
						previousValue.ESIBIZIONE.Remove(this);
					}
					this._GRUPPO_ARTISTA.Entity = value;
					if ((value != null))
					{
						value.ESIBIZIONE.Add(this);
						this._codGruppo = value.codGruppo;
					}
					else
					{
						this._codGruppo = default(int);
					}
					this.SendPropertyChanged("GRUPPO_ARTISTA");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_ESIBIZIONE", Storage="_TAPPA_CONCERTO", ThisKey="codTour,data", OtherKey="codTour,data", IsForeignKey=true)]
		public TAPPA_CONCERTO TAPPA_CONCERTO
		{
			get
			{
				return this._TAPPA_CONCERTO.Entity;
			}
			set
			{
				TAPPA_CONCERTO previousValue = this._TAPPA_CONCERTO.Entity;
				if (((previousValue != value) 
							|| (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TAPPA_CONCERTO.Entity = null;
						previousValue.ESIBIZIONE.Remove(this);
					}
					this._TAPPA_CONCERTO.Entity = value;
					if ((value != null))
					{
						value.ESIBIZIONE.Add(this);
						this._codTour = value.codTour;
						this._data = value.data;
					}
					else
					{
						this._codTour = default(int);
						this._data = default(System.DateTime);
					}
					this.SendPropertyChanged("TAPPA_CONCERTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GRUPPO_ARTISTA")]
	public partial class GRUPPO_ARTISTA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codGruppo;
		
		private string _nomeGruppo;
		
		private EntitySet<BRANO> _BRANO;
		
		private EntitySet<ESIBIZIONE> _ESIBIZIONE;
		
		private EntitySet<PARTECIPAZIONE> _PARTECIPAZIONE;
		
		private EntitySet<TOUR> _TOUR;
		
		private EntitySet<VARIAZIONE> _VARIAZIONE;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    partial void OnnomeGruppoChanging(string value);
    partial void OnnomeGruppoChanged();
    #endregion
		
		public GRUPPO_ARTISTA()
		{
			this._BRANO = new EntitySet<BRANO>(new Action<BRANO>(this.attach_BRANO), new Action<BRANO>(this.detach_BRANO));
			this._ESIBIZIONE = new EntitySet<ESIBIZIONE>(new Action<ESIBIZIONE>(this.attach_ESIBIZIONE), new Action<ESIBIZIONE>(this.detach_ESIBIZIONE));
			this._PARTECIPAZIONE = new EntitySet<PARTECIPAZIONE>(new Action<PARTECIPAZIONE>(this.attach_PARTECIPAZIONE), new Action<PARTECIPAZIONE>(this.detach_PARTECIPAZIONE));
			this._TOUR = new EntitySet<TOUR>(new Action<TOUR>(this.attach_TOUR), new Action<TOUR>(this.detach_TOUR));
			this._VARIAZIONE = new EntitySet<VARIAZIONE>(new Action<VARIAZIONE>(this.attach_VARIAZIONE), new Action<VARIAZIONE>(this.detach_VARIAZIONE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeGruppo", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nomeGruppo
		{
			get
			{
				return this._nomeGruppo;
			}
			set
			{
				if ((this._nomeGruppo != value))
				{
					this.OnnomeGruppoChanging(value);
					this.SendPropertyChanging();
					this._nomeGruppo = value;
					this.SendPropertyChanged("nomeGruppo");
					this.OnnomeGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_BRANO", Storage="_BRANO", ThisKey="codGruppo", OtherKey="codGruppo")]
		public EntitySet<BRANO> BRANO
		{
			get
			{
				return this._BRANO;
			}
			set
			{
				this._BRANO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_ESIBIZIONE", Storage="_ESIBIZIONE", ThisKey="codGruppo", OtherKey="codGruppo")]
		public EntitySet<ESIBIZIONE> ESIBIZIONE
		{
			get
			{
				return this._ESIBIZIONE;
			}
			set
			{
				this._ESIBIZIONE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_PARTECIPAZIONE", Storage="_PARTECIPAZIONE", ThisKey="codGruppo", OtherKey="codGruppo")]
		public EntitySet<PARTECIPAZIONE> PARTECIPAZIONE
		{
			get
			{
				return this._PARTECIPAZIONE;
			}
			set
			{
				this._PARTECIPAZIONE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_TOUR", Storage="_TOUR", ThisKey="codGruppo", OtherKey="codGruppo")]
		public EntitySet<TOUR> TOUR
		{
			get
			{
				return this._TOUR;
			}
			set
			{
				this._TOUR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_VARIAZIONE", Storage="_VARIAZIONE", ThisKey="codGruppo", OtherKey="codGruppo")]
		public EntitySet<VARIAZIONE> VARIAZIONE
		{
			get
			{
				return this._VARIAZIONE;
			}
			set
			{
				this._VARIAZIONE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRANO(BRANO entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = this;
		}
		
		private void detach_BRANO(BRANO entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = null;
		}
		
		private void attach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = this;
		}
		
		private void detach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = null;
		}
		
		private void attach_PARTECIPAZIONE(PARTECIPAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = this;
		}
		
		private void detach_PARTECIPAZIONE(PARTECIPAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = null;
		}
		
		private void attach_TOUR(TOUR entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = this;
		}
		
		private void detach_TOUR(TOUR entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = null;
		}
		
		private void attach_VARIAZIONE(VARIAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = this;
		}
		
		private void detach_VARIAZIONE(VARIAZIONE entity)
		{
			this.SendPropertyChanging();
			entity.GRUPPO_ARTISTA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOCATION")]
	public partial class LOCATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codLocation;
		
		private string _nomeLocation;
		
		private string _tipo;
		
		private string _via;
		
		private int _numeroCivico;
		
		private int _codCitta;
		
		private EntitySet<SETTORE> _SETTORE;
		
		private EntityRef<CITTA> _CITTA;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodLocationChanging(int value);
    partial void OncodLocationChanged();
    partial void OnnomeLocationChanging(string value);
    partial void OnnomeLocationChanged();
    partial void OntipoChanging(string value);
    partial void OntipoChanged();
    partial void OnviaChanging(string value);
    partial void OnviaChanged();
    partial void OnnumeroCivicoChanging(int value);
    partial void OnnumeroCivicoChanged();
    partial void OncodCittaChanging(int value);
    partial void OncodCittaChanged();
    #endregion
		
		public LOCATION()
		{
			this._SETTORE = new EntitySet<SETTORE>(new Action<SETTORE>(this.attach_SETTORE), new Action<SETTORE>(this.detach_SETTORE));
			this._CITTA = default(EntityRef<CITTA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codLocation", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codLocation
		{
			get
			{
				return this._codLocation;
			}
			set
			{
				if ((this._codLocation != value))
				{
					this.OncodLocationChanging(value);
					this.SendPropertyChanging();
					this._codLocation = value;
					this.SendPropertyChanged("codLocation");
					this.OncodLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeLocation", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nomeLocation
		{
			get
			{
				return this._nomeLocation;
			}
			set
			{
				if ((this._nomeLocation != value))
				{
					this.OnnomeLocationChanging(value);
					this.SendPropertyChanging();
					this._nomeLocation = value;
					this.SendPropertyChanged("nomeLocation");
					this.OnnomeLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tipo", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string tipo
		{
			get
			{
				return this._tipo;
			}
			set
			{
				if ((this._tipo != value))
				{
					this.OntipoChanging(value);
					this.SendPropertyChanging();
					this._tipo = value;
					this.SendPropertyChanged("tipo");
					this.OntipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_via", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string via
		{
			get
			{
				return this._via;
			}
			set
			{
				if ((this._via != value))
				{
					this.OnviaChanging(value);
					this.SendPropertyChanging();
					this._via = value;
					this.SendPropertyChanged("via");
					this.OnviaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numeroCivico", DbType="Int NOT NULL")]
		public int numeroCivico
		{
			get
			{
				return this._numeroCivico;
			}
			set
			{
				if ((this._numeroCivico != value))
				{
					this.OnnumeroCivicoChanging(value);
					this.SendPropertyChanging();
					this._numeroCivico = value;
					this.SendPropertyChanged("numeroCivico");
					this.OnnumeroCivicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codCitta", DbType="Int NOT NULL")]
		public int codCitta
		{
			get
			{
				return this._codCitta;
			}
			set
			{
				if ((this._codCitta != value))
				{
					if (this._CITTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodCittaChanging(value);
					this.SendPropertyChanging();
					this._codCitta = value;
					this.SendPropertyChanged("codCitta");
					this.OncodCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOCATION_SETTORE", Storage="_SETTORE", ThisKey="codLocation", OtherKey="codLocation")]
		public EntitySet<SETTORE> SETTORE
		{
			get
			{
				return this._SETTORE;
			}
			set
			{
				this._SETTORE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITTA_LOCATION", Storage="_CITTA", ThisKey="codCitta", OtherKey="codCitta", IsForeignKey=true)]
		public CITTA CITTA
		{
			get
			{
				return this._CITTA.Entity;
			}
			set
			{
				CITTA previousValue = this._CITTA.Entity;
				if (((previousValue != value) 
							|| (this._CITTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITTA.Entity = null;
						previousValue.LOCATION.Remove(this);
					}
					this._CITTA.Entity = value;
					if ((value != null))
					{
						value.LOCATION.Add(this);
						this._codCitta = value.codCitta;
					}
					else
					{
						this._codCitta = default(int);
					}
					this.SendPropertyChanged("CITTA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SETTORE(SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.LOCATION = this;
		}
		
		private void detach_SETTORE(SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.LOCATION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PARTECIPAZIONE")]
	public partial class PARTECIPAZIONE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codGruppo;
		
		private int _codArtista;
		
		private EntityRef<ARTISTA> _ARTISTA;
		
		private EntityRef<GRUPPO_ARTISTA> _GRUPPO_ARTISTA;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    partial void OncodArtistaChanging(int value);
    partial void OncodArtistaChanged();
    #endregion
		
		public PARTECIPAZIONE()
		{
			this._ARTISTA = default(EntityRef<ARTISTA>);
			this._GRUPPO_ARTISTA = default(EntityRef<GRUPPO_ARTISTA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					if (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codArtista", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codArtista
		{
			get
			{
				return this._codArtista;
			}
			set
			{
				if ((this._codArtista != value))
				{
					if (this._ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodArtistaChanging(value);
					this.SendPropertyChanging();
					this._codArtista = value;
					this.SendPropertyChanged("codArtista");
					this.OncodArtistaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTISTA_PARTECIPAZIONE", Storage="_ARTISTA", ThisKey="codArtista", OtherKey="codArtista", IsForeignKey=true)]
		public ARTISTA ARTISTA
		{
			get
			{
				return this._ARTISTA.Entity;
			}
			set
			{
				ARTISTA previousValue = this._ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ARTISTA.Entity = null;
						previousValue.PARTECIPAZIONE.Remove(this);
					}
					this._ARTISTA.Entity = value;
					if ((value != null))
					{
						value.PARTECIPAZIONE.Add(this);
						this._codArtista = value.codArtista;
					}
					else
					{
						this._codArtista = default(int);
					}
					this.SendPropertyChanged("ARTISTA");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_PARTECIPAZIONE", Storage="_GRUPPO_ARTISTA", ThisKey="codGruppo", OtherKey="codGruppo", IsForeignKey=true)]
		public GRUPPO_ARTISTA GRUPPO_ARTISTA
		{
			get
			{
				return this._GRUPPO_ARTISTA.Entity;
			}
			set
			{
				GRUPPO_ARTISTA previousValue = this._GRUPPO_ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRUPPO_ARTISTA.Entity = null;
						previousValue.PARTECIPAZIONE.Remove(this);
					}
					this._GRUPPO_ARTISTA.Entity = value;
					if ((value != null))
					{
						value.PARTECIPAZIONE.Add(this);
						this._codGruppo = value.codGruppo;
					}
					else
					{
						this._codGruppo = default(int);
					}
					this.SendPropertyChanged("GRUPPO_ARTISTA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POSTO")]
	public partial class POSTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codPosto;
		
		private int _numPosto;
		
		private int _codLocation;
		
		private string _nomeSettore;
		
		private EntitySet<BIGLIETTO> _BIGLIETTO;
		
		private EntityRef<SETTORE> _SETTORE;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodPostoChanging(int value);
    partial void OncodPostoChanged();
    partial void OnnumPostoChanging(int value);
    partial void OnnumPostoChanged();
    partial void OncodLocationChanging(int value);
    partial void OncodLocationChanged();
    partial void OnnomeSettoreChanging(string value);
    partial void OnnomeSettoreChanged();
    #endregion
		
		public POSTO()
		{
			this._BIGLIETTO = new EntitySet<BIGLIETTO>(new Action<BIGLIETTO>(this.attach_BIGLIETTO), new Action<BIGLIETTO>(this.detach_BIGLIETTO));
			this._SETTORE = default(EntityRef<SETTORE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codPosto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codPosto
		{
			get
			{
				return this._codPosto;
			}
			set
			{
				if ((this._codPosto != value))
				{
					this.OncodPostoChanging(value);
					this.SendPropertyChanging();
					this._codPosto = value;
					this.SendPropertyChanged("codPosto");
					this.OncodPostoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numPosto", DbType="Int NOT NULL")]
		public int numPosto
		{
			get
			{
				return this._numPosto;
			}
			set
			{
				if ((this._numPosto != value))
				{
					this.OnnumPostoChanging(value);
					this.SendPropertyChanging();
					this._numPosto = value;
					this.SendPropertyChanged("numPosto");
					this.OnnumPostoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codLocation", DbType="Int NOT NULL")]
		public int codLocation
		{
			get
			{
				return this._codLocation;
			}
			set
			{
				if ((this._codLocation != value))
				{
					if (this._SETTORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodLocationChanging(value);
					this.SendPropertyChanging();
					this._codLocation = value;
					this.SendPropertyChanged("codLocation");
					this.OncodLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeSettore", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nomeSettore
		{
			get
			{
				return this._nomeSettore;
			}
			set
			{
				if ((this._nomeSettore != value))
				{
					if (this._SETTORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnomeSettoreChanging(value);
					this.SendPropertyChanging();
					this._nomeSettore = value;
					this.SendPropertyChanged("nomeSettore");
					this.OnnomeSettoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POSTO_BIGLIETTO", Storage="_BIGLIETTO", ThisKey="codPosto", OtherKey="codPosto")]
		public EntitySet<BIGLIETTO> BIGLIETTO
		{
			get
			{
				return this._BIGLIETTO;
			}
			set
			{
				this._BIGLIETTO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTORE_POSTO", Storage="_SETTORE", ThisKey="codLocation,nomeSettore", OtherKey="codLocation,nomeSettore", IsForeignKey=true)]
		public SETTORE SETTORE
		{
			get
			{
				return this._SETTORE.Entity;
			}
			set
			{
				SETTORE previousValue = this._SETTORE.Entity;
				if (((previousValue != value) 
							|| (this._SETTORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SETTORE.Entity = null;
						previousValue.POSTO.Remove(this);
					}
					this._SETTORE.Entity = value;
					if ((value != null))
					{
						value.POSTO.Add(this);
						this._codLocation = value.codLocation;
						this._nomeSettore = value.nomeSettore;
					}
					else
					{
						this._codLocation = default(int);
						this._nomeSettore = default(string);
					}
					this.SendPropertyChanged("SETTORE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.POSTO = this;
		}
		
		private void detach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.POSTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PREZZO_SETTORE")]
	public partial class PREZZO_SETTORE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codTour;
		
		private System.DateTime _data;
		
		private int _codLocation;
		
		private string _nomeSettore;
		
		private float _prezzo;
		
		private int _numLiberi;
		
		private EntityRef<SETTORE> _SETTORE;
		
		private EntityRef<TAPPA_CONCERTO> _TAPPA_CONCERTO;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodTourChanging(int value);
    partial void OncodTourChanged();
    partial void OndataChanging(System.DateTime value);
    partial void OndataChanged();
    partial void OncodLocationChanging(int value);
    partial void OncodLocationChanged();
    partial void OnnomeSettoreChanging(string value);
    partial void OnnomeSettoreChanged();
    partial void OnprezzoChanging(float value);
    partial void OnprezzoChanged();
    partial void OnnumLiberiChanging(int value);
    partial void OnnumLiberiChanged();
    #endregion
		
		public PREZZO_SETTORE()
		{
			this._SETTORE = default(EntityRef<SETTORE>);
			this._TAPPA_CONCERTO = default(EntityRef<TAPPA_CONCERTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codTour", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codTour
		{
			get
			{
				return this._codTour;
			}
			set
			{
				if ((this._codTour != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodTourChanging(value);
					this.SendPropertyChanging();
					this._codTour = value;
					this.SendPropertyChanged("codTour");
					this.OncodTourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					if (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codLocation", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codLocation
		{
			get
			{
				return this._codLocation;
			}
			set
			{
				if ((this._codLocation != value))
				{
					if (this._SETTORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodLocationChanging(value);
					this.SendPropertyChanging();
					this._codLocation = value;
					this.SendPropertyChanged("codLocation");
					this.OncodLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeSettore", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nomeSettore
		{
			get
			{
				return this._nomeSettore;
			}
			set
			{
				if ((this._nomeSettore != value))
				{
					if (this._SETTORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnomeSettoreChanging(value);
					this.SendPropertyChanging();
					this._nomeSettore = value;
					this.SendPropertyChanged("nomeSettore");
					this.OnnomeSettoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prezzo", DbType="Real NOT NULL")]
		public float prezzo
		{
			get
			{
				return this._prezzo;
			}
			set
			{
				if ((this._prezzo != value))
				{
					this.OnprezzoChanging(value);
					this.SendPropertyChanging();
					this._prezzo = value;
					this.SendPropertyChanged("prezzo");
					this.OnprezzoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numLiberi", DbType="Int NOT NULL")]
		public int numLiberi
		{
			get
			{
				return this._numLiberi;
			}
			set
			{
				if ((this._numLiberi != value))
				{
					this.OnnumLiberiChanging(value);
					this.SendPropertyChanging();
					this._numLiberi = value;
					this.SendPropertyChanged("numLiberi");
					this.OnnumLiberiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTORE_PREZZO_SETTORE", Storage="_SETTORE", ThisKey="codLocation,nomeSettore", OtherKey="codLocation,nomeSettore", IsForeignKey=true)]
		public SETTORE SETTORE
		{
			get
			{
				return this._SETTORE.Entity;
			}
			set
			{
				SETTORE previousValue = this._SETTORE.Entity;
				if (((previousValue != value) 
							|| (this._SETTORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SETTORE.Entity = null;
						previousValue.PREZZO_SETTORE.Remove(this);
					}
					this._SETTORE.Entity = value;
					if ((value != null))
					{
						value.PREZZO_SETTORE.Add(this);
						this._codLocation = value.codLocation;
						this._nomeSettore = value.nomeSettore;
					}
					else
					{
						this._codLocation = default(int);
						this._nomeSettore = default(string);
					}
					this.SendPropertyChanged("SETTORE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_PREZZO_SETTORE", Storage="_TAPPA_CONCERTO", ThisKey="codTour,data", OtherKey="codTour,data", IsForeignKey=true)]
		public TAPPA_CONCERTO TAPPA_CONCERTO
		{
			get
			{
				return this._TAPPA_CONCERTO.Entity;
			}
			set
			{
				TAPPA_CONCERTO previousValue = this._TAPPA_CONCERTO.Entity;
				if (((previousValue != value) 
							|| (this._TAPPA_CONCERTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TAPPA_CONCERTO.Entity = null;
						previousValue.PREZZO_SETTORE.Remove(this);
					}
					this._TAPPA_CONCERTO.Entity = value;
					if ((value != null))
					{
						value.PREZZO_SETTORE.Add(this);
						this._codTour = value.codTour;
						this._data = value.data;
					}
					else
					{
						this._codTour = default(int);
						this._data = default(System.DateTime);
					}
					this.SendPropertyChanged("TAPPA_CONCERTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SETTORE")]
	public partial class SETTORE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codLocation;
		
		private string _nomeSettore;
		
		private EntitySet<POSTO> _POSTO;
		
		private EntitySet<PREZZO_SETTORE> _PREZZO_SETTORE;
		
		private EntityRef<LOCATION> _LOCATION;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodLocationChanging(int value);
    partial void OncodLocationChanged();
    partial void OnnomeSettoreChanging(string value);
    partial void OnnomeSettoreChanged();
    #endregion
		
		public SETTORE()
		{
			this._POSTO = new EntitySet<POSTO>(new Action<POSTO>(this.attach_POSTO), new Action<POSTO>(this.detach_POSTO));
			this._PREZZO_SETTORE = new EntitySet<PREZZO_SETTORE>(new Action<PREZZO_SETTORE>(this.attach_PREZZO_SETTORE), new Action<PREZZO_SETTORE>(this.detach_PREZZO_SETTORE));
			this._LOCATION = default(EntityRef<LOCATION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codLocation", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codLocation
		{
			get
			{
				return this._codLocation;
			}
			set
			{
				if ((this._codLocation != value))
				{
					if (this._LOCATION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodLocationChanging(value);
					this.SendPropertyChanging();
					this._codLocation = value;
					this.SendPropertyChanged("codLocation");
					this.OncodLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomeSettore", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nomeSettore
		{
			get
			{
				return this._nomeSettore;
			}
			set
			{
				if ((this._nomeSettore != value))
				{
					this.OnnomeSettoreChanging(value);
					this.SendPropertyChanging();
					this._nomeSettore = value;
					this.SendPropertyChanged("nomeSettore");
					this.OnnomeSettoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTORE_POSTO", Storage="_POSTO", ThisKey="codLocation,nomeSettore", OtherKey="codLocation,nomeSettore")]
		public EntitySet<POSTO> POSTO
		{
			get
			{
				return this._POSTO;
			}
			set
			{
				this._POSTO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SETTORE_PREZZO_SETTORE", Storage="_PREZZO_SETTORE", ThisKey="codLocation,nomeSettore", OtherKey="codLocation,nomeSettore")]
		public EntitySet<PREZZO_SETTORE> PREZZO_SETTORE
		{
			get
			{
				return this._PREZZO_SETTORE;
			}
			set
			{
				this._PREZZO_SETTORE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOCATION_SETTORE", Storage="_LOCATION", ThisKey="codLocation", OtherKey="codLocation", IsForeignKey=true)]
		public LOCATION LOCATION
		{
			get
			{
				return this._LOCATION.Entity;
			}
			set
			{
				LOCATION previousValue = this._LOCATION.Entity;
				if (((previousValue != value) 
							|| (this._LOCATION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOCATION.Entity = null;
						previousValue.SETTORE.Remove(this);
					}
					this._LOCATION.Entity = value;
					if ((value != null))
					{
						value.SETTORE.Add(this);
						this._codLocation = value.codLocation;
					}
					else
					{
						this._codLocation = default(int);
					}
					this.SendPropertyChanged("LOCATION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_POSTO(POSTO entity)
		{
			this.SendPropertyChanging();
			entity.SETTORE = this;
		}
		
		private void detach_POSTO(POSTO entity)
		{
			this.SendPropertyChanging();
			entity.SETTORE = null;
		}
		
		private void attach_PREZZO_SETTORE(PREZZO_SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.SETTORE = this;
		}
		
		private void detach_PREZZO_SETTORE(PREZZO_SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.SETTORE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAPPA_CONCERTO")]
	public partial class TAPPA_CONCERTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codTour;
		
		private System.DateTime _data;
		
		private System.TimeSpan _ora;
		
		private EntitySet<BIGLIETTO> _BIGLIETTO;
		
		private EntitySet<ESIBIZIONE> _ESIBIZIONE;
		
		private EntitySet<PREZZO_SETTORE> _PREZZO_SETTORE;
		
		private EntityRef<TOUR> _TOUR;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodTourChanging(int value);
    partial void OncodTourChanged();
    partial void OndataChanging(System.DateTime value);
    partial void OndataChanged();
    partial void OnoraChanging(System.TimeSpan value);
    partial void OnoraChanged();
    #endregion
		
		public TAPPA_CONCERTO()
		{
			this._BIGLIETTO = new EntitySet<BIGLIETTO>(new Action<BIGLIETTO>(this.attach_BIGLIETTO), new Action<BIGLIETTO>(this.detach_BIGLIETTO));
			this._ESIBIZIONE = new EntitySet<ESIBIZIONE>(new Action<ESIBIZIONE>(this.attach_ESIBIZIONE), new Action<ESIBIZIONE>(this.detach_ESIBIZIONE));
			this._PREZZO_SETTORE = new EntitySet<PREZZO_SETTORE>(new Action<PREZZO_SETTORE>(this.attach_PREZZO_SETTORE), new Action<PREZZO_SETTORE>(this.detach_PREZZO_SETTORE));
			this._TOUR = default(EntityRef<TOUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codTour", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codTour
		{
			get
			{
				return this._codTour;
			}
			set
			{
				if ((this._codTour != value))
				{
					if (this._TOUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodTourChanging(value);
					this.SendPropertyChanging();
					this._codTour = value;
					this.SendPropertyChanged("codTour");
					this.OncodTourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ora", DbType="Time NOT NULL")]
		public System.TimeSpan ora
		{
			get
			{
				return this._ora;
			}
			set
			{
				if ((this._ora != value))
				{
					this.OnoraChanging(value);
					this.SendPropertyChanging();
					this._ora = value;
					this.SendPropertyChanged("ora");
					this.OnoraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_BIGLIETTO", Storage="_BIGLIETTO", ThisKey="codTour,data", OtherKey="codTour,data")]
		public EntitySet<BIGLIETTO> BIGLIETTO
		{
			get
			{
				return this._BIGLIETTO;
			}
			set
			{
				this._BIGLIETTO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_ESIBIZIONE", Storage="_ESIBIZIONE", ThisKey="codTour,data", OtherKey="codTour,data")]
		public EntitySet<ESIBIZIONE> ESIBIZIONE
		{
			get
			{
				return this._ESIBIZIONE;
			}
			set
			{
				this._ESIBIZIONE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAPPA_CONCERTO_PREZZO_SETTORE", Storage="_PREZZO_SETTORE", ThisKey="codTour,data", OtherKey="codTour,data")]
		public EntitySet<PREZZO_SETTORE> PREZZO_SETTORE
		{
			get
			{
				return this._PREZZO_SETTORE;
			}
			set
			{
				this._PREZZO_SETTORE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOUR_TAPPA_CONCERTO", Storage="_TOUR", ThisKey="codTour", OtherKey="codTour", IsForeignKey=true)]
		public TOUR TOUR
		{
			get
			{
				return this._TOUR.Entity;
			}
			set
			{
				TOUR previousValue = this._TOUR.Entity;
				if (((previousValue != value) 
							|| (this._TOUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOUR.Entity = null;
						previousValue.TAPPA_CONCERTO.Remove(this);
					}
					this._TOUR.Entity = value;
					if ((value != null))
					{
						value.TAPPA_CONCERTO.Add(this);
						this._codTour = value.codTour;
					}
					else
					{
						this._codTour = default(int);
					}
					this.SendPropertyChanged("TOUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = this;
		}
		
		private void detach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = null;
		}
		
		private void attach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = this;
		}
		
		private void detach_ESIBIZIONE(ESIBIZIONE entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = null;
		}
		
		private void attach_PREZZO_SETTORE(PREZZO_SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = this;
		}
		
		private void detach_PREZZO_SETTORE(PREZZO_SETTORE entity)
		{
			this.SendPropertyChanging();
			entity.TAPPA_CONCERTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TOUR")]
	public partial class TOUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codTour;
		
		private string _titolo;
		
		private string _descrizione;
		
		private int _codGruppo;
		
		private EntitySet<TAPPA_CONCERTO> _TAPPA_CONCERTO;
		
		private EntityRef<GRUPPO_ARTISTA> _GRUPPO_ARTISTA;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodTourChanging(int value);
    partial void OncodTourChanged();
    partial void OntitoloChanging(string value);
    partial void OntitoloChanged();
    partial void OndescrizioneChanging(string value);
    partial void OndescrizioneChanged();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    #endregion
		
		public TOUR()
		{
			this._TAPPA_CONCERTO = new EntitySet<TAPPA_CONCERTO>(new Action<TAPPA_CONCERTO>(this.attach_TAPPA_CONCERTO), new Action<TAPPA_CONCERTO>(this.detach_TAPPA_CONCERTO));
			this._GRUPPO_ARTISTA = default(EntityRef<GRUPPO_ARTISTA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codTour", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codTour
		{
			get
			{
				return this._codTour;
			}
			set
			{
				if ((this._codTour != value))
				{
					this.OncodTourChanging(value);
					this.SendPropertyChanging();
					this._codTour = value;
					this.SendPropertyChanged("codTour");
					this.OncodTourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titolo", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string titolo
		{
			get
			{
				return this._titolo;
			}
			set
			{
				if ((this._titolo != value))
				{
					this.OntitoloChanging(value);
					this.SendPropertyChanging();
					this._titolo = value;
					this.SendPropertyChanged("titolo");
					this.OntitoloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrizione", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string descrizione
		{
			get
			{
				return this._descrizione;
			}
			set
			{
				if ((this._descrizione != value))
				{
					this.OndescrizioneChanging(value);
					this.SendPropertyChanging();
					this._descrizione = value;
					this.SendPropertyChanged("descrizione");
					this.OndescrizioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL")]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					if (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOUR_TAPPA_CONCERTO", Storage="_TAPPA_CONCERTO", ThisKey="codTour", OtherKey="codTour")]
		public EntitySet<TAPPA_CONCERTO> TAPPA_CONCERTO
		{
			get
			{
				return this._TAPPA_CONCERTO;
			}
			set
			{
				this._TAPPA_CONCERTO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_TOUR", Storage="_GRUPPO_ARTISTA", ThisKey="codGruppo", OtherKey="codGruppo", IsForeignKey=true)]
		public GRUPPO_ARTISTA GRUPPO_ARTISTA
		{
			get
			{
				return this._GRUPPO_ARTISTA.Entity;
			}
			set
			{
				GRUPPO_ARTISTA previousValue = this._GRUPPO_ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRUPPO_ARTISTA.Entity = null;
						previousValue.TOUR.Remove(this);
					}
					this._GRUPPO_ARTISTA.Entity = value;
					if ((value != null))
					{
						value.TOUR.Add(this);
						this._codGruppo = value.codGruppo;
					}
					else
					{
						this._codGruppo = default(int);
					}
					this.SendPropertyChanged("GRUPPO_ARTISTA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TAPPA_CONCERTO(TAPPA_CONCERTO entity)
		{
			this.SendPropertyChanging();
			entity.TOUR = this;
		}
		
		private void detach_TAPPA_CONCERTO(TAPPA_CONCERTO entity)
		{
			this.SendPropertyChanging();
			entity.TOUR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTENTE")]
	public partial class UTENTE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codUtente;
		
		private string _nome;
		
		private string _cognome;
		
		private string _mail;
		
		private string _numeroTelefono;
		
		private string _password;
		
		private EntitySet<BIGLIETTO> _BIGLIETTO;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodUtenteChanging(int value);
    partial void OncodUtenteChanged();
    partial void OnnomeChanging(string value);
    partial void OnnomeChanged();
    partial void OncognomeChanging(string value);
    partial void OncognomeChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    partial void OnnumeroTelefonoChanging(string value);
    partial void OnnumeroTelefonoChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public UTENTE()
		{
			this._BIGLIETTO = new EntitySet<BIGLIETTO>(new Action<BIGLIETTO>(this.attach_BIGLIETTO), new Action<BIGLIETTO>(this.detach_BIGLIETTO));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codUtente", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codUtente
		{
			get
			{
				return this._codUtente;
			}
			set
			{
				if ((this._codUtente != value))
				{
					this.OncodUtenteChanging(value);
					this.SendPropertyChanging();
					this._codUtente = value;
					this.SendPropertyChanged("codUtente");
					this.OncodUtenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nome", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string nome
		{
			get
			{
				return this._nome;
			}
			set
			{
				if ((this._nome != value))
				{
					this.OnnomeChanging(value);
					this.SendPropertyChanging();
					this._nome = value;
					this.SendPropertyChanged("nome");
					this.OnnomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cognome", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string cognome
		{
			get
			{
				return this._cognome;
			}
			set
			{
				if ((this._cognome != value))
				{
					this.OncognomeChanging(value);
					this.SendPropertyChanging();
					this._cognome = value;
					this.SendPropertyChanged("cognome");
					this.OncognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numeroTelefono", DbType="Char(10)")]
		public string numeroTelefono
		{
			get
			{
				return this._numeroTelefono;
			}
			set
			{
				if ((this._numeroTelefono != value))
				{
					this.OnnumeroTelefonoChanging(value);
					this.SendPropertyChanging();
					this._numeroTelefono = value;
					this.SendPropertyChanged("numeroTelefono");
					this.OnnumeroTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTENTE_BIGLIETTO", Storage="_BIGLIETTO", ThisKey="codUtente", OtherKey="codUtente")]
		public EntitySet<BIGLIETTO> BIGLIETTO
		{
			get
			{
				return this._BIGLIETTO;
			}
			set
			{
				this._BIGLIETTO.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.UTENTE = this;
		}
		
		private void detach_BIGLIETTO(BIGLIETTO entity)
		{
			this.SendPropertyChanging();
			entity.UTENTE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VARIAZIONE")]
	public partial class VARIAZIONE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codBrano;
		
		private int _codGruppo;
		
		private EntityRef<BRANO> _BRANO;
		
		private EntityRef<GRUPPO_ARTISTA> _GRUPPO_ARTISTA;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodBranoChanging(int value);
    partial void OncodBranoChanged();
    partial void OncodGruppoChanging(int value);
    partial void OncodGruppoChanged();
    #endregion
		
		public VARIAZIONE()
		{
			this._BRANO = default(EntityRef<BRANO>);
			this._GRUPPO_ARTISTA = default(EntityRef<GRUPPO_ARTISTA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codBrano", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codBrano
		{
			get
			{
				return this._codBrano;
			}
			set
			{
				if ((this._codBrano != value))
				{
					if (this._BRANO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodBranoChanging(value);
					this.SendPropertyChanging();
					this._codBrano = value;
					this.SendPropertyChanged("codBrano");
					this.OncodBranoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codGruppo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int codGruppo
		{
			get
			{
				return this._codGruppo;
			}
			set
			{
				if ((this._codGruppo != value))
				{
					if (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodGruppoChanging(value);
					this.SendPropertyChanging();
					this._codGruppo = value;
					this.SendPropertyChanged("codGruppo");
					this.OncodGruppoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANO_VARIAZIONE", Storage="_BRANO", ThisKey="codBrano", OtherKey="codBrano", IsForeignKey=true)]
		public BRANO BRANO
		{
			get
			{
				return this._BRANO.Entity;
			}
			set
			{
				BRANO previousValue = this._BRANO.Entity;
				if (((previousValue != value) 
							|| (this._BRANO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANO.Entity = null;
						previousValue.VARIAZIONE.Remove(this);
					}
					this._BRANO.Entity = value;
					if ((value != null))
					{
						value.VARIAZIONE.Add(this);
						this._codBrano = value.codBrano;
					}
					else
					{
						this._codBrano = default(int);
					}
					this.SendPropertyChanged("BRANO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRUPPO_ARTISTA_VARIAZIONE", Storage="_GRUPPO_ARTISTA", ThisKey="codGruppo", OtherKey="codGruppo", IsForeignKey=true)]
		public GRUPPO_ARTISTA GRUPPO_ARTISTA
		{
			get
			{
				return this._GRUPPO_ARTISTA.Entity;
			}
			set
			{
				GRUPPO_ARTISTA previousValue = this._GRUPPO_ARTISTA.Entity;
				if (((previousValue != value) 
							|| (this._GRUPPO_ARTISTA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRUPPO_ARTISTA.Entity = null;
						previousValue.VARIAZIONE.Remove(this);
					}
					this._GRUPPO_ARTISTA.Entity = value;
					if ((value != null))
					{
						value.VARIAZIONE.Add(this);
						this._codGruppo = value.codGruppo;
					}
					else
					{
						this._codGruppo = default(int);
					}
					this.SendPropertyChanged("GRUPPO_ARTISTA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
